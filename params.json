{
  "name": "kml-loader",
  "tagline": "Library that helps you load your Points Of Interests on google map.",
  "body": "# KML loader\r\nLibrary that helps you load locations from KML files on your google map.\r\n\r\nFor the demo you can visit [Demo Page](http://simkesd.github.io/kml-loader/demo.html).\r\n\r\n### Usage\r\n\r\nI will explain how this works, but using it is pretty straight forward. Just check out the source code for [example](https://github.com/simkesd/kml-loader/blob/master/examples/index.html).\r\nThe important file here is `dist/kml-loader.js`. After you include it you can then create an instance of `kmlLoader` object. `kmlLoader` has 3 parameters.\r\n\r\n1. google map object (instance of `google.maps.Map(elem)`);\r\n2. array of elements containing `data-layer-url` attribute based on which `kmlLoader` will generate pins on google map. (`document.querySelectorAll('ul.filters li')`)\r\n3. object containing additional, non-required options\r\n```\r\n{\r\n        filterClickCallback: function(){}, // fired after one of DOM elements passed as second param is clicked\r\n        setEvents: true, // if true sets events which control what happens on filter click\r\n        showOnLoad: true, // load all KMLs on page load\r\n        onLayerChangeKeepState: true // if true - keeps state, if false - only one layer at a time can be showed\r\n}\r\n```\r\n\r\n##### HTML structure\r\n\r\n``` HTML\r\n<ul class=\"filters\">\r\n    <li data-layer-url=\"http://happyfist.co/pois/pois/POI/gyms.kml\"><a>Gyms</a></li>\r\n    <li data-layer-url=\"http://happyfist.co/pois/pois/POI/hotels.kml\"><a>Hotels</a></li>\r\n</ul>\r\n\r\n<div id=\"map-canvas\"></div>\r\n\r\n<script type=\"text/javascript\" src=\"https://maps.googleapis.com/maps/api/js></script>\r\n<script type=\"text/javascript\" src=\"../dist/kml-loader.js\"></script>\r\n```\r\n\r\nLibrary uses data-layer-uri to get the location of your KML files.\r\n=> NOTE: Location of your KML files must be on server with public address, as google needs to read data from them so it could show them on the map.\r\n\r\n##### Javascript\r\n\r\nYou must initialize map by yourself, and pass reference to the map into constructor of library. So for an example you can do this:\r\n\r\n``` javascript\r\nvar map;\r\nvar kl;\r\nfunction initialize() {\r\n    map = new google.maps.Map(document.getElementById('map-canvas'), {\r\n        center: new google.maps.LatLng(40.751077, -73.945135),\r\n        zoom: 13,\r\n        mapTypeId: google.maps.MapTypeId.TERRAIN\r\n    });\r\n\r\n    kl = new kmlLoader(map, document.querySelectorAll('ul.filters li'), {\r\n        filterClickCallback: function() {\r\n            console.info('filterClickCallback called!');\r\n        },\r\n        setEvents: true,\r\n        showOnLoad: true,\r\n        onLayerChangeKeepState: true\r\n    });\r\n}\r\n\r\n\r\ngoogle.maps.event.addDomListener(window, 'load', initialize);\r\n```\r\n\r\nThis portion of code will create initialize a google map for you (and set some options also, so you can actually see POIs)\r\nPart of this code that we are particularly interested is next one:\r\n\r\n``` javascript\r\nkl = new kmlLoader(map, document.querySelectorAll('ul.filters li'), {\r\n        filterClickCallback: function() {\r\n            console.info('filterClickCallback called!');\r\n        },\r\n        setEvents: true,\r\n        showOnLoad: true,\r\n        onLayerChangeKeepState: true\r\n    });\r\n```\r\n\r\nThis code is initializing our library by sending required parameters to constructor. So, required parameters are\r\n    * Instance of google map object and\r\n    * Array of DOM elements containing data-layer-url attribute. Its content should be exact location of your KML file.\r\nThird param is non required options object. \r\n\r\n### Additional info\r\n\r\n##### kmlLoader(googleMap, domElements, {})\r\nInitializes the library by setting some internals and setting events on provided DOM elements. This allows you to click\r\nprovided DOM elements and to load only clicked kml layer to your map.\r\n\r\n##### loadAll(customOptions)\r\nLoads all kml layers from DOM elements you passed through data-layer-url to constructor,\r\n`param {object} object with layer options` [details](https://developers.google.com/maps/documentation/javascript/examples/layer-kml)\r\n\r\n##### getLayers()\r\nReturns all kml layers currently loaded to map\r\n\r\n##### addLayer(src, customOptions)\r\nAdds a KMLLayer based on the URL and options passed\r\n`param {string} src A URL for a KML file.`\r\n`param {object} object with layer options` [details](https://developers.google.com/maps/documentation/javascript/examples/layer-kml)\r\n\r\n##### loadSingleLayer(src, customOptions)\r\nLoads single layer to google map, and deletes all previously set layers.\r\n`param {string} src A URL for a KML file.`\r\n`param {object} object with layer options` [details](https://developers.google.com/maps/documentation/javascript/examples/layer-kml)\r\n\r\n##### clearPreviousLayers()\r\nClears your google map from previously set layers.\r\n",
  "google": "<script>   (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){   (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),   m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)   })(window,document,'script','//www.google-analytics.com/analytics.js','ga');    ga('create', 'UA-47470142-5', 'auto');   ga('send', 'pageview');  </script>",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}